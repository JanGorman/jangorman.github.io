<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | Jan Gorman]]></title>
  <link href="http://JanGorman.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://JanGorman.github.io/"/>
  <updated>2014-12-01T21:35:06+01:00</updated>
  <id>http://JanGorman.github.io/</id>
  <author>
    <name><![CDATA[Jan Gorman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Design Patterns in Swift: Adapter Pattern]]></title>
    <link href="http://JanGorman.github.io/blog/2014/12/01/design-patterns-in-swift-adapter-pattern/"/>
    <updated>2014-12-01T20:44:17+01:00</updated>
    <id>http://JanGorman.github.io/blog/2014/12/01/design-patterns-in-swift-adapter-pattern</id>
    <content type="html"><![CDATA[<p>Already December! Time for a new chapter on applying design patterns in Swift. This time it&rsquo;s the <a href="http://en.wikipedia.org/wiki/Adapter_pattern">Adapter Pattern&rsquo;s</a> turn. Good stuff! And simple!</p>

<p>So what is it and what can it do for you? The Adapter Pattern converts the interface of one class into another interface. That&rsquo;s it. And with this simple pattern you can let classes work together that otherwise couldn&rsquo;t.</p>

<p>So let&rsquo;s assume you have the following:</p>

<pre><code>protocol MusicPlayer {

    func insertMedia()
    func play()

}

class CassettePlayer: MusicPlayer {

    func insertMedia() {
        println("Insert mixtape")
    }

    func play() {
        println("Push down clunky button and play")
    }

}
</code></pre>

<p>Clearly, this kind if thing is only <a href="https://www.youtube.com/watch?v=dIm87r9lnD0">acceptable in the 80s</a>.</p>

<p>Fast forward to now, Spotify, beats, you name it. How do you travel back in time and get a client that accepts a <code>MusicPlayer</code> to stream and play a track? You adapt it:</p>

<pre><code>protocol MediaPlayer {

    func getMedia(title: String)
    func play()

}

class StreamingMediaPlayer: MediaPlayer {

    func getMedia(title: String) {
        println("Acquiring \(title) from the cloud")
    }

    func play() {
        println("Playing!")
    }

}

// MARK: Adapter in action

class StreamingMediaPlayerAdapter: MusicPlayer {

    let player: StreamingMediaPlayer

    init(player: StreamingMediaPlayer) {
        self.player = player
    }

    func insertMedia(title: String) {
        player.getMedia(title)
    }

    func play() {
        player.play()
    }

}
</code></pre>

<p>Jaws drop in amazement. But now consider your existing project that you want to spice up with some of that Swift. You&rsquo;ve written your amazing new classes, time to integrate with Objective-C. So you head over to <a href="https://developer.apple.com/library/ios/documentation/swift/conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_77">Using Swift with Cocoa and Objective-C</a> only to find that the new goodness doesn&rsquo;t all work. All of these aren&rsquo;t compatible with Objective-C:</p>

<ul>
<li>Generics</li>
<li>Tuples</li>
<li>Enumerations defined in Swift</li>
<li>Structures defined in Swift</li>
<li>Top-level functions defined in Swift</li>
<li>Global variables defined in Swift</li>
<li>Typealiases defined in Swift</li>
<li>Swift-style variadics</li>
<li>Nested types</li>
<li>Curried functions</li>
</ul>


<p>Not to despair though, you can still go ahead and be as idiomatic in Swift as you want. With some extra effort you can get the old to talk to the new. Consider a Swift only protocol that just needs to use a tuple:</p>

<pre><code>protocol Legend {

    func doSomething() -&gt; (String, String)

}

class IAmLegend: Legend {

    func doSomething() -&gt; (String, String) {
        return ("very", "important")
    }

}

func doSomethingWithLegend(legend: Legend) {
    let (first, second) = legend.doSomething()
    // Do something else with these variables
}
</code></pre>

<p>Important stuff going on. You get the idea. But obviously you won&rsquo;t be able to call that from any existing code.</p>

<pre><code>@objc class Compatible {

    let first: String
    let second: String

    init(first: String, second: String) {
        self.first = first
        self.second = second
    }

}

class LegendSwiftAdapter: Legend {

    let compatible: Compatible

    init(compatible: Compatible) {
        self.compatible = compatible
    }

    func doSomething() -&gt; (String, String) {
         return (compatible.first, compatible.second)
    }

}

@objc class LegendObjcAdapter {

    func doSomethingWithATuple(compatible: Compatible) {
        let adapter = LegendSwiftAdapter(compatible)
        doSomethingWithLegend(adapter)
    }

}
</code></pre>

<p>I hope it&rsquo;s somewhat clear what&rsquo;s going on. Somewhat contrived example maybe… I&rsquo;ll upload a more practical application soon-ish. Anyways, that&rsquo;s the Adapter Pattern applied in Swift for you. As always the code is available as Xcode playground on <a href="https://github.com/JanGorman/Swift-Design-Patterns">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Patterns in Swift: Command]]></title>
    <link href="http://JanGorman.github.io/blog/2014/11/17/design-patterns-in-swift-command/"/>
    <updated>2014-11-17T21:19:18+01:00</updated>
    <id>http://JanGorman.github.io/blog/2014/11/17/design-patterns-in-swift-command</id>
    <content type="html"><![CDATA[<p>Continuing on in the series, lets have a look at the Command Pattern and how to implement it in Swift. As <a href="http://en.wikipedia.org/wiki/Command_pattern">Wikipedia</a> so eloquently defines it</p>

<p><blockquote><p>In object-oriented programming, the command pattern is a behavioral design pattern in which an object is used to represent and encapsulate all the information needed to call a method at a later time.</p></blockquote></p>

<p>The encapsulation part is key. Say you have a bunch of different objects that can all do <em>something</em> and you want to expose those in a unified kind of way then the command pattern is your friend. Another great feature is that it allows for undos of those actions as you can keep a stack of the commands you ran and just pop them off the stack with an undo method. So what does that look like? First you define your command protocol:</p>

<pre><code>protocol Command {

    func execute()
    func undo()

}
</code></pre>

<p>Easy enough. Lets get concrete:</p>

<pre><code>class Light {

    func on() {
        println("The light is on")
    }

    func off() {
        println("The light is off")
    }

}

class LightCommand: Command {

    let light: Light

    init(light: Light) {
        self.light = light
    }

    func execute() {
        light.on()
    }

    func undo() {
        light.off()
    }

}
</code></pre>

<p>Apart from producing a bunch of code that wraps the obvious nothing magic has happened yet. But now imagine you have some other appliance that also has an on/off kind of functionality but with different method signatures:</p>

<pre><code>class Heating {

    func turnUp(degrees: Int) {
        println("The heating is set to \(degrees)°C")
    }

    func turnOff() {
        println("The heating is off")
    }

}

class HeatingCommand: Command {

    let heating: Heating

    init(heating: Heating) {
        self.heating = heating
    }

    func execute() {
        heating.turnUp(23)
    }

    func undo() {
        heating.turnOff()
    }

}
</code></pre>

<p>Metric of course.</p>

<p>And it gets neater: There&rsquo;s of course nothing to stop you from bunching together multiple method calls into a single command. So to continue with the home automation theme, you could have a macro type command <code>ArriveAtHomeCommand</code> that switches on a bunch of lights, sets the heating to a comfortable level and switches on the TV.</p>

<p>Too much code! More cryptic! Ok, ok. So you can also do a similar thing using closures that are your commands. The simplified way to define a closure makes that at least a bit more readable than it was in Objective-C:</p>

<pre><code>typealias CommandClosure = () -&gt; Void

var commands = [CommandClosure]()

let heatingCommand = { () -&gt; Void in
    let heating = Heating()
    heating.turnUp(23)
}

commands.append(heatingCommand)

// Much later
commands[0]()
</code></pre>

<p>That also works. The option to store closures/functions inside of arrays is pretty cool but here you loose the build in undo option. The way around that would be to define both an execute and undo block and whenever you execute a command you push its corresponding undo into your array/stack. But if you&rsquo;re only going one way and can skip the undo, this is a viable way to go.</p>

<p>Again the code is available as Xcode playground on <a href="https://github.com/JanGorman/Swift-Design-Patterns">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Patterns in Swift: Strategy]]></title>
    <link href="http://JanGorman.github.io/blog/2014/11/09/design-patterns-in-swift-strategy/"/>
    <updated>2014-11-09T10:44:39+01:00</updated>
    <id>http://JanGorman.github.io/blog/2014/11/09/design-patterns-in-swift-strategy</id>
    <content type="html"><![CDATA[<p>As a refresher, I thought it could be fun to look at some common design patterns and how they apply to Swift. One very essential part of the pattern-tool-chest is the strategy pattern. Let&rsquo;s dive straight in.</p>

<p>With the strategy pattern you define algorithms or behavior. You then compose your objects out of those behaviors. How does that look like?</p>

<p>First, your behavior protocol and two possible implementations:</p>

<pre><code>protocol TapBehavior {

    func tap()

}

class CartTapBehavior: TapBehavior {

    func tap() {
        println("I'm the cart tap")
    }

}

class WishListTapBehavior: TapBehavior {

    func tap() {
        println("I'm the wish list tap")
    }

}
</code></pre>

<p>Which brings up an important point: it&rsquo;s always preferrable to program to a protocol/interface rather than to a concrete implementation.</p>

<p>Next, you&rsquo;d want to actually use the behavior:</p>

<pre><code>class SomeViewWithAButton: UIView {

    @IBOutlet weak var aButton: UIButton!

    var tapBehavior: TapBehavior?

    @IBAction func didTapButton(sender: AnyObject) {
        tapBehavior?.tap()
    }

}
</code></pre>

<p>By making the behavior a property of the class it is now easy to add and replace behaviors at runtime. You might begin to see how this can lead to very flexible designs. A different approach here could have been to create an abstract base view and then create two concrete implementations for different tap behaviors but as soon as you need a new kind of behavior you&rsquo;d be forced to create a new subclass. And now imagine that you have  multiple behaviors in a class – the subclass approach would lead to all kinds of combinations of subclasses that each have to implement variations of behavior.</p>

<p>Even if this is an extremely simple pattern, it&rsquo;s good to keep it in mind the next time you have to implement varying behavior in some kind of base class. Would composing work better than inheriting?</p>

<p>A full example is available as Xcode playground on <a href="https://github.com/JanGorman/Swift-Design-Patterns">github</a></p>
]]></content>
  </entry>
  
</feed>
